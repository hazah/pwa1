var CACHE_VERSION = 1;
var CACHE_NAME = "v" + CACHE_VERSION + ":sw-cache-";

self.addEventListener('install', (event) => {
  console.info("[Service Worker Installing]", self);
  event.waitUntil(
    caches.open(CACHE_NAME).then(function prefill(cache) {
      return cache.addAll([
        "<%= asset_pack_path "application.js" %>",
        "<%= path_to_stylesheet "application", debug: true %>",
        "<%= root_path %>",
        "<%= manifest_path(format: :json) %>",
        "<%= init_path(format: :js) %>",
        "<%= asset_path("icon_192.png") %>",
        "<%= asset_path("icon_512.png") %>",
        "<%= offline_path %>"
      ]);
    })
  );
});

self.addEventListener('activate', (event) => {
  console.info("[Service Worker Activating]", self);
  createDatabase();
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.filter(function(cacheName) {
          return cacheName.indexOf("v" + CACHE_VERSION) !== 0;
        }).map(function(cacheName) {
          return caches.delete(cacheName);
        })
      );
    }).then(function(result) {
      return result;
    })
  );
});

self.addEventListener('fetch', (event) => {
  if (event.request.headers.get("Accept") === "application/json, text/javascript, */*; q=0.01"
    && event.request.url !== "<%= manifest_url(format: :json) %>") {
    event.respondWith(
      getLayout("welcome").then((layout) => {
        console.info("[Using Layout]", layout);
        return new Response(JSON.stringify(layout.value), {
          headers: {'Content-Type': 'application/json'}
        });
      }).catch((error) => {
        console.error(error);
        let layout = {
          'main-application': 'welcome-message'
        };

        return new Response(JSON.stringify(layout), {
          headers: {'Content-Type': 'application/json'}
        });
      })
    );
  } else {
    event.respondWith(
      caches.match(event.request).then(function(response) {
        if (response) {
          console.info("[Responding With Local Resource]", event.request);
        } else {
          console.info("[Responding With Remote Resource]", event.request);
        }
        return response || fetch(event.request);
      }).catch(function() {
        console.error("[Responding With Offline Resource]", event.request);
        return caches.match("<%= offline_path %>");
      })
    );
  }
});

function createDatabase() {
  if ('indexedDB' in self) {
    let handle = self.indexedDB.open("database", CACHE_VERSION);

    handle.addEventListener("success", (event) => {
      console.info("[Opened Database]", event);
      let db = event.target.result;

      db.addEventListener("error", (error) => {
        console.error("[Database Error]", error);
      });
    });

    handle.addEventListener("upgradeneeded", (event) => {
      console.info("[Upgrading Database]", event);
      let db = event.target.result;
      let layouts;
      try {
        layouts = db.createObjectStore("layouts", { keyPath: "name" });
        layouts.createIndex("name", "name", { unique: true });
        layouts.transaction.addEventListener("complete", (event) => {
          let layouts = db.transaction("layouts", "readwrite").objectStore("layouts");
          layouts.add({ name: "welcome", value: { 'main-application': 'welcome-message' } });
        });
      } catch (error) {
        console.error(error);
      }
    });

    handle.addEventListener("error", (error) => {
      console.error("[Could Not Open Database]", error);
    });
  }
}

function getLayout(name) {
  return new Promise((success, error) => {
    if ('indexedDB' in self) {
      let handle = self.indexedDB.open("database", CACHE_VERSION);
      
      handle.addEventListener("success", (event) => {
        console.info("[Opened Database]", event);
        let db = event.target.result;

        try {
          let layouts = db.transaction("layouts").objectStore("layouts");
          let layout = layouts.get("welcome");
          layout.addEventListener("success", (event) => {
            console.info("[Retrieved Layout]", event);
            success(event.target.result);
          });

          layout.addEventListener("error", (error) => {
            error(error);
          });
        } catch (error) {
          error(error);
        }

        db.addEventListener("error", (error) => {
          error(error);
        });
      });
    }
  });
}
